version: '3.8'

services:
  # Main Trading Platform
  trading-bot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: advanced_trading_platform
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - TZ=UTC
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./results:/app/results
      - ./config:/app/config
    ports:
      - "8000:8000"  # FastAPI web interface
    depends_on:
      - redis
      - influxdb
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # InfluxDB for time-series data storage
  influxdb:
    image: influxdb:2.7
    container_name: trading_influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=trading_data
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=trading_password_123
      - INFLUXDB_USER=trader
      - INFLUXDB_USER_PASSWORD=trader_password_456
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for monitoring and visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: trading_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana_admin_123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - influxdb
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: trading_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Jupyter Notebook for analysis and research
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: trading_jupyter
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=trading_jupyter_token_123
    volumes:
      - ./notebooks:/home/jovyan/notebooks
      - ./data:/home/jovyan/data
      - ./models:/home/jovyan/models
      - ./results:/home/jovyan/results
    depends_on:
      - trading-bot
    networks:
      - trading-network

  # Web Dashboard (Optional - React frontend)
  dashboard:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: trading_dashboard
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000/ws
    depends_on:
      - trading-bot
    networks:
      - trading-network

  # Backup Service
  backup:
    image: alpine:latest
    container_name: trading_backup
    restart: unless-stopped
    volumes:
      - ./data:/backup/data:ro
      - ./models:/backup/models:ro
      - ./results:/backup/results:ro
      - backup_storage:/backup/archive
    command: >
      sh -c "
      while true; do
        echo 'Creating backup at $(date)'
        tar -czf /backup/archive/trading_backup_$(date +%Y%m%d_%H%M%S).tar.gz -C /backup data models results
        find /backup/archive -name '*.tar.gz' -mtime +7 -delete
        echo 'Backup completed, sleeping for 6 hours'
        sleep 21600
      done"
    networks:
      - trading-network

  # Log Aggregation (Optional - ELK Stack)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: trading_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - trading-network
    profiles:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: trading_logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/usr/share/logstash/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - trading-network
    profiles:
      - elk

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: trading_kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - trading-network
    profiles:
      - elk

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  elasticsearch_data:
    driver: local
  backup_storage:
    driver: local