# Docker Compose configuration for Automated Trading Platform
version: '3.8'

services:
  # Main trading application
  trading-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: application
    container_name: trading-platform
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_db
      - REDIS_URL=redis://redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./backups:/app/backups
      - ./.env:/app/.env
    depends_on:
      - postgres
      - redis
      - influxdb
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Development version with hot reload
  trading-app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: trading-platform-dev
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_db
      - REDIS_URL=redis://redis:6379/1
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=DEBUG
    ports:
      - "8001:8000"
      - "8888:8888"  # Jupyter port
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - trading-network
    profiles:
      - dev

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # InfluxDB for time series data
  influxdb:
    image: influxdb:2.7-alpine
    container_name: trading-influxdb
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: trading
      DOCKER_INFLUXDB_INIT_PASSWORD: trading_password
      DOCKER_INFLUXDB_INIT_ORG: trading-platform
      DOCKER_INFLUXDB_INIT_BUCKET: market-data
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: trading-token-123456789
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:10.2.0
    container_name: trading-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin_password
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - influxdb
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 15s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./frontend/dist:/usr/share/nginx/html
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - trading-app
      - grafana
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jupyter Notebook for analysis (development only)
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: trading-jupyter
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: "trading-jupyter-token"
    ports:
      - "8888:8888"
    volumes:
      - .:/app
      - ./notebooks:/app/notebooks
    command: |
      sh -c "
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root \
        --NotebookApp.token='trading-jupyter-token' \
        --NotebookApp.password='' \
        --notebook-dir=/app/notebooks
      "
    networks:
      - trading-network
    profiles:
      - dev

  # Log aggregation with ELK stack (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: trading-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - trading-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: trading-logstash
    volumes:
      - ./docker/logstash/config:/usr/share/logstash/pipeline
      - ./logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - trading-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: trading-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - trading-network
    profiles:
      - logging

# Named volumes for data persistence
volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  influxdb_config:
  grafana_data:
  prometheus_data:
  elasticsearch_data:

# Networks
networks:
  trading-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16